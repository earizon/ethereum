## GraphQL 
- Extracted from @[https://graphql.org/]
  """GraphQL is a  query language  for APIs and a runtime
     for fulfilling those queries with your existing data.
     ... simplifies API evolution, and enable powerful dev
     tools."""

  Example GraphQL Queries
@[https://github.com/ConsenSys/ethql/wiki/Example-Use-Cases]
   Query a single block (5000000)
<a TODO href="https://ethql-alpha.infura.io/graphql?query=%7B%0A%20%20block(number%3A%205000000)%20%7B%0A%20%20%20%20hash%0A%20%20%20%20transactions(filter%3A%20%7B%20withInput%3A%20true%20%7D)%20%7B%0A%20%20%20%20%20%20index%0A%20%20%20%20%20%20hash%0A%20%20%20%20%20%20from%20%7B%0A%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20to%20%7B%0A%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20decoded%20%7B%0A%20%20%20%20%20%20%20%20...%20on%20ERC20Transfer%20%7B%0A%20%20%20%20%20%20%20%20%20%20tokenContract%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20symbol%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20from%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20account%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%09address%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokenBalance%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20to%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20account%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20value%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A">[fiddle]</a>
  Example Query
  {                                                   QUERY:
    block(number:   5000000 ) {                     ← SELECT ... FROM block 5000 ...
      hash                                                    ^                   ^
      transactions                                  ← transactions                ·
        (filter:   { withInput: true } )            ← WHERE input Data exists  ····

      {                                             ← SUBQUERY OVER QUERY RESULTS:
                                                      SELECT ... FROM FIRST_QUERY
        index                                                                      ^
        hash                                                                       ·
        from { address }                              WHERE from=address AND to=address
        to   { address }
        decoded {
          ... on ERC20Transfer {                    ← for those that can be decoded as
                                                      token transfers, return.
            tokenContract { symbol }                  ← token symbol
            from {                                    ← sending address
              account { address }
              tokenBalance                            ← sending address token balance
            }
            to {  account { address } }               ← receiving address
            value
          }
        }
      }
    }
  }

  Information on specific blocks
  {
    blocks(numbers: [1000, 1001,])   {        ← SELECT ... FROM BLOCK in (1000,1001)
                                                       ^
      transactionsRoles(from:"0xF5b...") {    ← transactions.gasPrice WHERE from = 0xF5b...
        gasPrice   ←···········································┘
      }
    }
  }

  Information on a range of blocks
  {
    blocksRange(numberRange: [54000, 54005])   ← SELECT ... FROM BLOCK in numberRanger
    {                                                   ^
                                                        └··········┐
      transactions {                                               │
        hash                                      tx.hash  ········┤
        value                                     tx.value ········┤
        from {                                                     │
          address                                 tx.from.address··┤
          balance                                 tx.from.balance··┤
        }                                                          │
        to { address }                            tx.to  .address··┘
      }
    }
  }

  Information on an account
  for account "0x06012c8cf97BEaD5deAe237070F9587f8E7A266d".
  {                                 ← SELECT ... FROM BLOCKCHAIN   ...
                                              ^                     ^
                                              ·    ┌────────────────┴──────┐
   account(address: "0x06012..."){            ·  ← WHERE account="0x6012..."
     storage{                                 ·
       value(at: 0)                   account.storage.value at index 0
     }
   }
  }

  Information on a TX
  {
    transaction(hash: "0x7cc...") {   ← For TX with hash 0x7cc... return:
      logs {                          ← fetch the log topics
        topics
        decoded {                     ← and attempt to decode the TX to reveal
          event                         ← event
          entity                        ← entity
          standard                      ← Standard information
        }
      }
    }
  }
### GraphQL over HTTP
@[https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/GraphQL/]

  - Reduce overhead for common queries.
    Ex:
    Non-GraphQL                 GraphQL:
    ----------------------      ------------------
    - query   each receipt      - single query 
      in a block


- The Besu GraphQL schema describes the GraphQL implementation for
  Ethereum. Enable the GraphQL service using command line options.

Note

GraphQL is not supported over WebSockets.

Access the GraphQL endpoint at http://<HOST>:<PORT>/graphql.
Configure <HOST> and <PORT> using graphql-http-host and
graphql-http-port. The default endpoint is
http://127.0.0.1:8547/graphql.
GraphQL requests with cURL

Hyperledger Besu JSON-RPC API methods with an equivalent GraphQL
query include a GraphQL request and result in the method example.

Example

The following syncing request returns data about the synchronization
status.

curl -X POST -H "Content-Type: application/json" \
 --data '{ "query": "{syncing{startingBlock currentBlock highestBlock}}"}'
 http://localhost:8547/graphql

GraphQL requests with GraphiQL App

The third-party tool, GraphiQL, provides a tabbed interface for
editing and testing GraphQL queries and mutations. GraphiQL also
provides access to the Besu GraphQL schema from within the app.

Besu does not execute pending transactions so results from account,
call, and estimateGas for Pending do not reflect pending transactions.

Example
Pending Transaction Count

curl -X POST -H "Content-Type: application/json" \
  --data '{ "query": "{pending {transactionCount}}"}' \
  http://localhost:8547/graphql

Pending Transactions

curl -X POST -H "Content-Type: application/json" \
 --data '{ "query": "{pending {transactions{hash}}}"}' \
 http://localhost:8547/graphql
[[}]]

[[{integration.protocol.thegraph,integration.graphql,scalability.graph,10_EVM.events]]
[[01_PM.low_code,dev_framework.the_graph,02_QA.UX,01_PM.TODO]]
## TheGraph Protocol
- "Before The Graph, teams had to develop and operate proprietary
  indexing servers. This required significant engineering and hardware
  resources and broke the important security properties required for
  decentralization."

- TheGraph can be part of Sharding scalability future:
@[https://money.yahoo.com/graph-positioned-unshackle-ethereum-2-180403603.html]
  "...  Vitalik’s idea is effectively ‘rollups on top of
   sharding’, but this creates its own issue – where will the
   historical data from all these shards be stored?

   ...problem: where exactly all this sharding data go?
   Vitalik suggested institutional volunteers, DAOs, block
   explorers, and torrents as theoretical solutions – but only
  one project was name-dropped:
   Protocols like The Graph can create incentivised marketplaces
  where clients pay servers for historical data with Merkle proofs of
  its correctness.  This creates an incentive for people and
  institutions to run servers that store historical data and
  provide it on demand.

- popular services already using TheGraph protocol:
  Uniswap:
  Sintetics:
  Decentraland:
  Aragon:

- TODO:
@[https://thegraph.com/docs/developer/create-subgraph-hosted]
@[https://medium.com/intech-conseil-expertise/create-your-graph-node-to-query-complex-data-from-blockchain-via-graphql-6f08fbd494c5]

By Kebin Thizy @[https://medium.com/@thizy.kevin]
- GitHub repo: @[https://github.com/investorid/subgraph-experiment]

-  "The Graph protocol is a decentralized protocol for
    indexing and querying data from blockchains, starting
    with Ethereum. It makes it possible to query data that is
    difficult to query directly.”

- it knows about the entities it indexes.
  composed of subgraphs, carefully developed by the community.
- There is a global instance of TheGraph that accepts subgraph definition.

  Example reference Smart Contract storing Identity claims
   Ex:
   claim type 1: id-holder is French   , attested/signed by issuer_i1
   claim type 2: holder is over 18     , attested/signed by issuer_i1
   claim type 3: has not bank debts    , attested/signed by issuer_i2
   claim type 3: ...                   , attested/signed by issuer_i3
   ...
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   For each contract instance, for each claim type,
   fetch all claims attested/signed by same issuer_iN

  └ Without Graphs:
    for contract in identityContractInstances:     ←   A loop for each instance
       for claim_type in type1 type2 ...:          ←   A loop for each type
           fetch claims where issuer = issuer_iN
  └ With GraphQL and the Graph protocol:
  -  A single GraphQL query suffices .

- PRE-SETUP (opinionated, using docker, and NodeJS)
  - $ git clone https://github.com/graphprotocol/graph-node.git
    $ cd graph-node
    $ sudo docker-compose up # ← Start up Graph instance/PostgreSQL/IPFS
                                 needs ports 4001, 5001, 8000, 8001, 8020,
                                             8080 and 5432

  - $ yarn init                      # ← Init NodeJS project (create 'package.json')
    $ yarn add --dev \               # ← Install graph... NodeJS package dependencies
           @graphprotocol/graph-cli
           @graphprotocol/graph-ts
    $ vim package.json
    {
      "scripts" : {
        "codegen"      : "graph codegen",
        "create-local" : "graph create domain/graph-name --node http://127.0.0.1:8020",
        "build"        : "graph build",
        "deploy-local" : "graph deploy domain/graph-name --debug --ipfs http://localhost:5001 --node http://127.0.0.1:8020/",
        "watch-local"  : "graph deploy domain/graph-name --watch --debug --node http://127.0.0.1:8020/ --ipfs http://localhost:5001"
      }
    }
                                       ^^^^^^^^^^^^^^^^^
                              - Replace domain/graph-name to mirror
                                the SubGraph. Ex: investorid/id

     $ cp ${ContractABI_json} ./abis        # ← alt 1: Copy ABIs
     $ yarn add --dev @investorid/solidity  # ← alt 2: use a package (prefered)
  Creating the Graph:

   subgraph.yaml : meta-data describing the SubGraph:
                   Declares ABI to be used and scanned
                   by the graph node.
   | specVersion: 0.0.3
   | description: Decentralized IDs over Ethereum
   | repository: https://github.com/investorid/investorid-subgraph
   | schema:
┌→ |   file: ./schema.graphql    ← entities used by the SubGraph and exposed via GraphQL.
·  | dataSources:
·  |   - kind: ethereum/contract
·  |     name: Identity
·  |     network: http://localhost:8545
·  |     source:
·  |       abi: Identity
·  |     mapping:
·  |       kind: ethereum/events
·  |       apiVersion: 0.0.3
·  |       language: wasm/assemblyscript
·  |       file: ./src/handler/identity.ts
·  |       entities:   ←················· Any entity used by event handlers
·  |         - Identity                   must be declared in here
·  |         - Key
·  |       abis:
·  |         - name: Identity
·  |           file: ./node_modules/@investorid/solidity/build/contracts/Identity.json
·  |       eventHandlers: ←·············· all event to be scanned/handled must
·  |                                      be declared here
·  |         - event: KeyAdded(indexed bytes32,indexed uint256,indexed uint256)
·  |           handler:  handleKeyAdded
·  |         - event: KeyRemoved(indexed bytes32,indexed uint256,indexed uint256)
·  |           handler:  handleKeyRemoved
·                                  ·
└  schema.graphql
   | type Identity @entity {
   |   id: ID!
   |   address: Bytes!
   |   keys: [Key!]! @derivedFrom(field: "identity")  ← reverse property
   | }                                                  more info at:
   |                                                  @[https://thegraph.com/docs/graphql-api]
   | type Key @entity {
   |   id: ID!
   |   keyType: BigInt!    ← BigInt, Bytesis a custom type
   |   key: Bytes!
   |   purposes: [Int!]!
   |   identity: Identity!
   | }

   .src/handlers/identity.ts  ← Event handlers:
                                To generated the referenced typings and
                                automated code parts referenced run
                                $ yarn run codegen
                                ouput:
                                → ../../generated/Identity/Identity
                                → ../../generated/schema

  | import { log, store, Address, Bytes }
  |   from "@graphprotocol/graph-ts";
  |
  | import {
  |   KeyAdded as KeyAddedEvent,
  |   KeyRemoved as KeyRemovedEvent,
  | } from '../../generated/Identity/Identity';
  |
  | import {
  |   Identity,
  |   Key,
  | } from '../../generated/schema';
  |
  | export function
  |          handleKeyAdded (event: KeyAddedEvent): void {
  |   let identity = Identity.load(event.address.toHexString());
  |   if (identity == null) {
  |     identity = new Identity(event.address.toHexString());
  |     identity.address = event.address;
  |
  |     identity.save();
  |   }
  |
  |   let key = Key.load(createKeyID(event.address, event.params.key));
  |   if (key == null) {
  |     key = new Key(createKeyID(event.address, event.params.key));
  |
  |     key.identity = identity.id;
  |     key.key = event.params.key;
  |     key.keyType = event.params.keyType;
  |     key.purposes = [event.params.purpose.toI32()];
  |
  |     key.save();
  |
  |     identity.save();
  |   } else {
  |     let purposes = key.purposes;
  |     purposes.push(event.params.purpose.toI32());
  |     key.purposes = purposes;
  |
  |     key.save();
  |     identity.save();
  |   }
  | }
  |
  | export function
  |          handleKeyRemoved (event: KeyRemovedEvent): void {
  |   let identity = Identity.load(event.address.toHexString());
  |   if (identity == null) {
  |     return;
  |   }
  |
  |   let key = Key.load(createKeyID(event.address, event.params.key));
  |   if (key == null) {
  |     return;
  |   }
  |
  |   let keyIndex = key.purposes.indexOf(event.params.purpose.toI32());
  |   if (keyIndex == -1) {
  |     return;
  |   }
  |   let purposes = key.purposes;
  |   purposes.splice(keyIndex, 1);
  |   key.purposes = purposes;
  |
  |   if (key.purposes.length === 0) {
  |     store.remove('Key', key.id);
  |   } else {
  |     key.save();
  |   }
  | }
  |
  | function createKeyID(identity: Address, key: Bytes): string {
  |   return identity.toHexString().
  |       concat('-').concat(key.toHexString());
  | }

  Implementation of event handlers
  Refer to The Graph documentation, to learn how to write mappings.

  - basics about mappings:
    - To create a new entity instance, call:
      <Entity>#create(<id>)  ← <id> is a string that must be generated.
    - To be able to retrieve instances from blockchain data,
      the IDs should be composed of addresses, hashes, etc...
    - To load an existing entity, call:
      <Entity>#load(<id>)
    - To save new entity|update existing one, call:
      <entity>.save()
    - To destroy and remove an entity from the store, call
      store.remove('EntityName', id)

  Running the subgraph

  $ yarn run build        ←·· Build SubGraph
  $ yarn run create-local ←·· Declare it  on local Graph node
  $ yarn run deploy-local ←·· Deploy  to the local Graph node
  $ yarn run watch-local  ←·· Optional: Watch deployig after
                                      each code update


  GraphQL UI for queries available at:
  http://127.0.0.1:8000/subgraphs/name/domain/graph-name/graphql
                                       └──────┬────────┘
                                       replace with name
                                       of the subgraph

Note: Whenever the Ethereum network has been reseted
      (Ganache restarted,...), the ./docker/data must
      be deleted:
      - required to clean the existing database
        that checks the genesis block for the
        current ethereum network.
[[integration.protocol.thegraph}]]


